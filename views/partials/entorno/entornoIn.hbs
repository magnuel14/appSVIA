{{> entorno/heaEntorno}}
<link rel="stylesheet" href="/style/styles.css">

<main id="main">

    <div class="center-content1 page-container1">


        <p> Reference Image: </p>
        <div class="progress" id="loader">
            <div class="indeterminate"></div>
        </div>
        <div style="position: relative" class="margin1">
            <img id="refImg" src="" style="max-width: 800px;" />
            <canvas id="refImgOverlay" class="overlay1" />
        </div>
        <div class="row side-by-side1">

            <!-- image_selection_control -->
            <div class="row">
                <label>Upload Image:</label>
                <div>
                    <input width="720" height="560" id="refImgUploadInput" type="file" class="bold1"
                        onchange="uploadRefImage()" accept=".jpg, .jpeg, .png">
                </div>
            </div>
            <div class="row">
                <label for="refImgUrlInput">Get image from URL:</label>
                <input hidden id="refImgUrlInput" type="text" class="bold1">
            </div>
            <button style="display: none;" class="btn btn-success" onclick="loadRefImageFromUrl()">
                Reconocer de nueva
            </button>
            <!-- image_selection_control -->
        </div>
        <p> Query Image: </p>
        <div style="position: relative" class="margin1">
            <img id="queryImg" src="" style="max-width: 800px;" />
            <canvas id="queryImgOverlay" class="overlay1" />
        </div>
        <div class="row side-by-side1">

            <!-- image_selection_control -->
            <div class="row">
                <label>Upload Image:</label>
                <div>

                    <input width="720" height="560" id="queryImgUploadInput" type="file" class="bold1"
                        onchange="uploadQueryImage()" accept=".jpg, .jpeg, .png">
                </div>
            </div>
            <div class="row">
                <label for="queryImgUrlInput">Get image from URL:</label>
                <input hidden id="queryImgUrlInput" type="text" class="bold1">
            </div>
            <button style="display: none;" class="btn btn-success" onclick="loadQueryImageFromUrl()">
                Reconocer de nueva
            </button>

            <!-- image_selection_control -->
        </div>

        <div style="display: none;" class="center-content1">
            <!-- face_detector_selection_control -->
            <div id="face_detector_selection_control" class="row input-field">
                <select id="selectFaceDetector">
                    <option value="ssd_mobilenetv1">SSD Mobilenet V1</option>
                    <option value="tiny_face_detector">Tiny Face Detector</option>
                </select>
                <label>Select Face Detector</label>
            </div>
            <!-- face_detector_selection_control -->

            <!-- ssd_mobilenetv1_controls -->
            <span id="ssd_mobilenetv1_controls">
                <div class="row side-by-side1">
                    <div class="row">
                        <label for="minConfidence">Min Confidence:</label>
                        <input disabled value="0.5" id="minConfidence" type="text" class="bold1">
                    </div>
                    <button class="waves-effect waves-light btn" onclick="onDecreaseMinConfidence()">
                        <i class="material-icons left">-</i>
                    </button>
                    <button class="waves-effect waves-light btn" onclick="onIncreaseMinConfidence()">
                        <i class="material-icons left">+</i>
                    </button>
                </div>
            </span>
            <!-- ssd_mobilenetv1_controls -->

            <!-- tiny_face_detector_controls -->
            <span id="tiny_face_detector_controls">
                <div class="row side-by-side1">
                    <div class="row input-field" style="margin-right: 20px;">
                        <select id="inputSize">
                            <option value="" disabled selected>Input Size:</option>
                            <option value="160">160 x 160</option>
                            <option value="224">224 x 224</option>
                            <option value="320">320 x 320</option>
                            <option value="416">416 x 416</option>
                            <option value="512">512 x 512</option>
                            <option value="608">608 x 608</option>
                        </select>
                        <label>Input Size</label>
                    </div>
                    <div class="row">
                        <label for="scoreThreshold">Score Threshold:</label>
                        <input disabled value="0.5" id="scoreThreshold" type="text" class="bold1">
                    </div>
                    <button class="waves-effect waves-light btn" onclick="onDecreaseScoreThreshold()">
                        <i class="material-icons left">-</i>
                    </button>
                    <button class="waves-effect waves-light btn" onclick="onIncreaseScoreThreshold()">
                        <i class="material-icons left">+</i>
                    </button>
                </div>
            </span>
            <!-- tiny_face_detector_controls -->
        </div>
        <div class="center-content page-container">

            <div class="progress" id="loader">
                <div class="indeterminate"></div>
            </div>
            <div style="position: relative" class="margin">
                <video onloadedmetadata="onPlay(this)" id="inputVideo" autoplay muted playsinline></video>
                <canvas id="overlay" />
            </div>

            <div style="display: none;" class="row side-by-side">

                <!-- face_detector_selection_control -->
                <div id="face_detector_selection_control" class="row input-field" style="margin-right: 20px;">
                    <select id="selectFaceDetector">
                        <option value="ssd_mobilenetv1">SSD Mobilenet V1</option>
                        <option value="tiny_face_detector">Tiny Face Detector</option>
                    </select>
                    <label>Select Face Detector</label>
                </div>
                <!-- face_detector_selection_control -->

                <!-- fps_meter -->
                <div id="fps_meter" class="row side-by-side">
                    <div>
                        <label for="time">Time:</label>
                        <input disabled value="-" id="time" type="text" class="bold">
                        <label for="fps">Estimated Fps:</label>
                        <input disabled value="-" id="fps" type="text" class="bold">
                    </div>
                </div>
                <!-- fps_meter -->

            </div>


            <!-- ssd_mobilenetv1_controls -->
            <span style="display: none;" id="ssd_mobilenetv1_controls">
                <div class="row side-by-side">
                    <div class="row">
                        <label for="minConfidence">Min Confidence:</label>
                        <input disabled value="0.5" id="minConfidence" type="text" class="bold">
                    </div>
                    <button class="waves-effect waves-light btn" onclick="onDecreaseMinConfidence()">
                        <i class="material-icons left">-</i>
                    </button>
                    <button class="waves-effect waves-light btn" onclick="onIncreaseMinConfidence()">
                        <i class="material-icons left">+</i>
                    </button>
                </div>
            </span>
            <!-- ssd_mobilenetv1_controls -->

            <!-- tiny_face_detector_controls -->
            <span style="display: none;" id="tiny_face_detector_controls">
                <div class="row side-by-side">
                    <div class="row input-field" style="margin-right: 20px;">
                        <select id="inputSize">
                            <option value="" disabled selected>Input Size:</option>
                            <option value="128">128 x 128</option>
                            <option value="160">160 x 160</option>
                            <option value="224">224 x 224</option>
                            <option value="320">320 x 320</option>
                            <option value="416">416 x 416</option>
                            <option value="512">512 x 512</option>
                            <option value="608">608 x 608</option>
                        </select>
                        <label>Input Size</label>
                    </div>
                    <div class="row">
                        <label for="scoreThreshold">Score Threshold:</label>
                        <input disabled value="0.5" id="scoreThreshold" type="text" class="bold">
                    </div>
                    <button class="waves-effect waves-light btn" onclick="onDecreaseScoreThreshold()">
                        <i class="material-icons left">-</i>
                    </button>
                    <button class="waves-effect waves-light btn" onclick="onIncreaseScoreThreshold()">
                        <i class="material-icons left">+</i>
                    </button>
                </div>
            </span>
            <!-- tiny_face_detector_controls -->
        </div>
</main>

<script>
    let faceMatcher = null

    async function uploadRefImage(e) {
        const imgFile = $('#refImgUploadInput').get(0).files[0]
        const img = await faceapi.bufferToImage(imgFile)
        $('#refImg').get(0).src = img.src
        updateReferenceImageResults()
    }

    async function loadRefImageFromUrl(url) {
        const img = await requestExternalImage($('#refImgUrlInput').val())
        $('#refImg').get(0).src = img.src
        updateReferenceImageResults()
    }

    async function uploadQueryImage(e) {
        const imgFile = $('#queryImgUploadInput').get(0).files[0]
        const img = await faceapi.bufferToImage(imgFile)
        $('#queryImg').get(0).src = img.src
        updateQueryImageResults()
    }

    async function loadQueryImageFromUrl(url) {
        const img = await requestExternalImage($('#queryImgUrlInput').val())
        $('#queryImg').get(0).src = img.src
        updateQueryImageResults()
    }

    async function updateReferenceImageResults() {
        const inputImgEl = $('#refImg').get(0)
        const canvas = $('#refImgOverlay').get(0)

        const fullFaceDescriptions = await faceapi
            .detectAllFaces(inputImgEl, getFaceDetectorOptions())
            .withFaceLandmarks()
            .withFaceDescriptors()

        if (!fullFaceDescriptions.length) {
            return
        }

        // crea FaceMatcher con etiquetas asignadas automáticamente
        // a partir de los resultados de detección de la imagen de referencia
        faceMatcher = new faceapi.FaceMatcher(fullFaceDescriptions)

        faceapi.matchDimensions(canvas, inputImgEl)
        // cambiar el tamaño de la detección y los puntos de referencia en caso de que la imagen mostrada sea más pequeña que
        // tamaño original
        const resizedResults = faceapi.resizeResults(fullFaceDescriptions, inputImgEl)
        // dibuja un recuadro con la etiqueta correpondiente en texto
        const labels = faceMatcher.labeledDescriptors
            .map(ld => ld.label)
        resizedResults.forEach(({ detection, descriptor }) => {
            const label = faceMatcher.findBestMatch(descriptor).toString()
            const options = { label }
            const drawBox = new faceapi.draw.DrawBox(detection.box, options)
            drawBox.draw(canvas)
        })
    }

    async function updateQueryImageResults() {
        if (!faceMatcher) {
            return
        }

        const inputImgEl = $('#queryImg').get(0)
        const canvas = $('#queryImgOverlay').get(0)

        const results = await faceapi
            .detectAllFaces(inputImgEl, getFaceDetectorOptions())
            .withFaceLandmarks()
            .withFaceDescriptors()

        faceapi.matchDimensions(canvas, inputImgEl)
        // cambiar el tamaño de la detección y los puntos de 
        //referencia en caso de que la imagen mostrada sea más pequeña que
        // tamaño original
        const resizedResults = faceapi.resizeResults(results, inputImgEl)

        resizedResults.forEach(({ detection, descriptor }) => {
            const label = faceMatcher.findBestMatch(descriptor).toString()
            const options = { label }
            const drawBox = new faceapi.draw.DrawBox(detection.box, options)
            drawBox.draw(canvas)
        })
    }



    async function run() {
        // carga la deteccion facial, 
        // load face detection, modelo de referencia facial y modelos de reconocimiento facial
        await changeFaceDetector(selectedFaceDetector)
        await faceapi.loadFaceLandmarkModel('/')
        await faceapi.loadFaceRecognitionModel('/')
    }
    async function updateResults() {
        await updateReferenceImageResults()
        await updateQueryImageResults()
    }

    $(document).ready(function () {
        renderNavBar('#main', 'face_recognition')
        initFaceDetectionControls()
        run()
    })
</script>
